odoo.define('ct_pos_taxableinvoice.TaxableInvoice', function (require) {
    "use strict";
    var lines = require("point_of_sale.screens");
    var gui = require('point_of_sale.gui');
    var core = require('web.core');
    var QWeb = core.qweb;
    var rpc = require('web.rpc');
    var _t = core._t;
    var models = require('point_of_sale.models');

    console.log(lines);

    models.PosModel = models.PosModel.extend({
        push_and_taxable_invoice_order: function(order){
            var self = this;
            var invoiced = new $.Deferred();
            if(!order.get_client()){
                invoiced.reject({code:400, message:'Missing Customer', data:{}});
                return invoiced;
            }

            var order_id = this.db.add_order(order.export_as_JSON());

            this.flush_mutex.exec(function(){
                var done = new $.Deferred(); // holds the mutex
                var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                transfer.fail(function(error){
                    invoiced.reject(error);
                    done.reject();
                });

                // on success, get the order id generated by the server
                transfer.pipe(function(order_server_id){
                    // generate the pdf and download it
                    if (order_server_id.length) {
                        console.log(order.is_to_invoice(), order)
                        setTimeout(function() {
                            if (order.is_to_invoice()) {
                                self.chrome.do_action('point_of_sale.pos_invoice_report',{additional_context:{
                                    active_ids:order_server_id,
                                }}).done(function () {
                                    invoiced.resolve();
                                    done.resolve();
                                })
                                .fail(function (error) {
                                    invoiced.reject({code:401, message:'Backend Invoice', data:{order: order}});
                                    done.reject();
                                });
                            }
                        }, 1000);

                        if(order.taxable_invoice){
                            rpc.query({
                                model: 'pos.order',
                                method: 'create_taxable_invoice',
                                args: [order_server_id],
                            })
                            .then(function (invoice_id) {
                                self.chrome.do_action('wt_invoice_report.wt_account_invoices',{additional_context:{
                                    active_ids:invoice_id,
                                }}).done(function () {
                                    invoiced.resolve();
                                    done.resolve();
                                }).fail(function (error) {
                                    invoiced.reject({code:401, message:'Backend Invoice', data:{order: order}});
                                    done.reject();
                                });
                            })
                        }
                    } else {
                        // The order has been pushed separately in batch when
                        // the connection came back.
                        // The user has to go to the backend to print the invoice
                        invoiced.reject({code:401, message:'Backend Invoice', data:{order: order}});
                        done.reject();
                    }
                });

                return done;

            });

            return invoiced;
        },
    });

    lines.PaymentScreenWidget.include({
        init: function(parent, options) {
            var self = this;
            this._super(parent, options);
            var taxable_invoice = false;
        },
        click_taxable_invoice: function(){
            var order = this.pos.get_order();
            order.assert_editable();
            order.taxable_invoice = !order.taxable_invoice;
            this.$('.taxable_invoice').toggleClass("highlight");
        },
        renderElement: function() {
            var self = this;
            this._super.apply(this, arguments);
            this.$('.taxable_invoice').click(function(){
                self.click_taxable_invoice();
            });

        },
        finalize_validation: function() {
            var self = this;
            var order = this.pos.get_order();
            if ((order.is_paid_with_cash() || order.get_change()) && this.pos.config.iface_cashdrawer) {
                this.pos.proxy.open_cashbox();
            }
            order.initialize_validation_date();
            order.finalized = true;
            if (order.is_to_invoice() || order.taxable_invoice) {
                var invoiced = this.pos.push_and_taxable_invoice_order(order);
                this.invoicing = true;
                invoiced.fail(this._handleFailedPushForInvoice.bind(this, order, false));
                invoiced.done(function(){
                    self.invoicing = false;
                    self.gui.show_screen('receipt');
                });
            } else{
                this.pos.push_order(order);
                this.gui.show_screen('receipt');
            }
//            if (order.taxable_invoice){
//                    var invoiced = this.pos.push_and_taxable_invoice_order(order);
//                    invoiced.fail(this._handleFailedPushForInvoice.bind(this, order, false));
//                    invoiced.done(function(){
//                        self.invoicing = false;
//                        self.gui.show_screen('receipt');
//                    });
//            }
        },
    });

});

//finalize_validation for invoice generation
//push_and_invoice_order responsible function for generating invoice